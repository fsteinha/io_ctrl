# Predefines
ifeq ($(strip $(CUTE_INCLUDE_PATH)),)
  CUTE_INCLUDE_PATH=../extern/CUTE/cute
  $(warning CUTE include path not specified. Set to $(CUTE_INCLUDE_PATH))
endif

ifeq ($(strip $(OUT)),)
  OUT=./out
  $(warning OUT path not specified. Set to $(OUT))
endif

# Compiler
CC := g++

# Compiler flags
CFLAGS := -std=c++11 -Wall -Wextra
CFLAGS +=
# Source files
SRC := debounce.cpp
TEST_SRC := debounce_test.cpp

# Object files
OBJ := $(patsubst %.cpp,$(OUT)/%.o,$(SRC))
TEST_OBJ := $(patsubst %.cpp,$(OUT)/%.ot,$(TEST_SRC))

# Executables
EXEC := $(OUT)/debounce_test

# Archive file
AR := ar
ARFLAGS := rcs
LIB := $(OUT)/libdebounce.a

# CUTE library path
CUTE_LIB := $(CUTE_LIB_PATH)
CUTE_INCLUDE := $(CUTE_INCLUDE_PATH)

# Target for compiling the application
all: $(EXEC) lib

# Target for compiling the test
$(EXEC): $(TEST_OBJ) $(OBJ)
	$(CC) $(CFLAGS) -o $(EXEC) $(OBJ) $(TEST_OBJ)

# Target for generating archive
$(LIB): $(OBJ)

.PHONY: lib
lib: $(LIB)
	$(AR) $(ARFLAGS) $(LIB) $(OBJ)

# Clean rule
clean:
	$(RM) $(OBJ) $(EXEC) $(TEST_OBJ) $(LIB)

# Rule to compile source files
$(OUT)/%.o: %.cpp
	$(CC) $(CFLAGS) -c -o $@ $<

$(OUT)/%.ot: %.cpp
	$(CC) $(CFLAGS) -I$(CUTE_INCLUDE_PATH) -c -o $@ $<
